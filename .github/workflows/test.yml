name: CI/CD Pipeline with Docker

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Step 20: Add Docker-based testing to CI
  docker-test:
    name: Docker Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          docker build --target test -t forkspy-test:latest .

      - name: Verify test image exists
        run: docker images forkspy-test:latest

      - name: Run tests in Docker
        run: |
          docker run --rm \
            -e NODE_ENV=test \
            -e MONGODB_URI=${{ secrets.MONGODB_URI || 'mongodb://localhost:27017/forkspy-test' }} \
            -e GITHUB_CLIENT_ID=test_client_id \
            -e GITHUB_CLIENT_SECRET=test_client_secret \
            -e NEXTAUTH_SECRET=test_secret_for_testing_only \
            -e NEXTAUTH_URL=http://localhost:3000 \
            -e RESEND_API_KEY=test_resend_key \
            -e NEXT_PUBLIC_APP_URL=http://localhost:3000 \
            -v ${{ github.workspace }}/coverage:/app/coverage \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            forkspy-test:latest

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-results
          path: |
            coverage/
            test-results/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

  # Step 19: Add Docker image building to CI pipeline
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: docker-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Step 21: Container security scanning
  docker-security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          only-severities: critical,high
          exit-code: true

  # Legacy Node.js testing (keeping for comparison)
  node-test:
    name: Node.js Tests (Legacy)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload legacy test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: node-test-results
          path: |
            coverage/
            test-results/
          retention-days: 30

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

  # Docker-based build verification
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build production image
        run: |
          docker build -t forkspy-build-test:latest .

      - name: Test container startup
        run: |
          docker run -d --name test-container \
            -e NODE_ENV=production \
            -e NEXT_TELEMETRY_DISABLED=1 \
            -e PORT=3000 \
            -e HOSTNAME=0.0.0.0 \
            -e NEXTAUTH_SECRET=test_secret \
            -e NEXTAUTH_URL=http://localhost:3000 \
            -e GITHUB_CLIENT_ID=test_client \
            -e GITHUB_CLIENT_SECRET=test_secret \
            -e MONGODB_URI=mongodb://localhost:27017/test \
            -e RESEND_API_KEY=test_key \
            -p 3000:3000 \
            forkspy-build-test:latest

          # Wait for container to start
          sleep 10

          # Test health endpoint
          docker exec test-container curl -f http://localhost:3000/api/health || exit 1

          # Cleanup
          docker stop test-container
          docker rm test-container

  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [docker-test, docker-build, docker-security, node-test, lint, docker-build-test]
    if: always()

    steps:
      - name: Check Docker test results
        run: |
          echo "Docker Test job status: ${{ needs.docker-test.result }}"
          echo "Docker Build job status: ${{ needs.docker-build.result }}"
          echo "Docker Security job status: ${{ needs.docker-security.result }}"
          echo "Docker Build Test job status: ${{ needs.docker-build-test.result }}"
          echo "Node.js Test job status: ${{ needs.node-test.result }}"
          echo "Lint job status: ${{ needs.lint.result }}"
          
          if [[ "${{ needs.docker-test.result }}" == "failure" || 
                "${{ needs.docker-build.result }}" == "failure" || 
                "${{ needs.docker-security.result }}" == "failure" || 
                "${{ needs.docker-build-test.result }}" == "failure" || 
                "${{ needs.node-test.result }}" == "failure" || 
                "${{ needs.lint.result }}" == "failure" ]]; then
            echo "‚ùå CI/CD Pipeline Failed"
            exit 1
          else
            echo "‚úÖ CI/CD Pipeline Passed"
            echo "üê≥ Docker integration successful!"
            echo "üîí Security scanning completed"
            echo "üß™ All tests passing in containers"
          fi

      - name: Docker integration status
        run: |
          echo "## üê≥ Phase 4 CI/CD Integration Status"
          echo "‚úÖ Step 18: GitHub Actions updated to use Docker"
          echo "‚úÖ Step 19: Docker image building integrated to CI pipeline"
          echo "‚úÖ Step 20: Docker-based testing implemented"
          echo "‚úÖ Step 21: Container security scanning enabled"
          echo ""
          echo "**Phase 4 Complete!** üéâ"
